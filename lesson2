<?php

//1. Создать структуру классов ведения товарной номенклатуры.
//а) Есть абстрактный товар.
//б) Есть цифровой товар, штучный физический товар и товар на вес.
//в) У каждого есть метод подсчета финальной стоимости.
//г) У цифрового товара стоимость постоянная – дешевле штучного товара в два раза. У штучного товара обычная 
//стоимость, у весового – в зависимости от продаваемого количества в килограммах. У всех формируется в конечном итоге доход с продаж.
//д) Что можно вынести в абстрактный класс, наследование?


//Сделал 2 варианта: с абстрактным классом и без него, потому что в данном случае без абстрактного класса, 
//по-моему, получается короче.
//Реализация с абстрактным классом

abstract class item 
{	
    const CHARGES = 0.82;
	public $id;
    public $name;
    public $unitPrice;
    protected $unit;
    
    public function __construct($id, $name, $unitPrice) {
    	$this -> id = $id;
        $this -> name = $name;
        $this -> unitPrice = $unitPrice;
    }
    
    abstract public function getFinalPrice($quantity);
    abstract public function getRevenue($finalPrice);
    abstract public function printData($quantity);
}

class pieceItem extends item
{	
    protected $unit = 'pcs.';
    public function getFinalPrice($quantity) {
        $finalPrice=$quantity*$this -> unitPrice;
        return $finalPrice;
    }
    public function getRevenue($finalPrice) {
        return $finalPrice*self::CHARGES;
    }
    public function printData($quantity) {
        $finalPrice = $this -> getFinalPrice($quantity);
        $revenue = $this -> getRevenue($finalPrice);
    	echo 'Final price for ' . $quantity . ' ' . $this -> unit . ' of ' . $this -> name .  ' is ' . $finalPrice . ' euro<br>Revenue is ' . $revenue .'<br>';
    }
}

class digitalItem extends item
{
    public function getFinalPrice($quantity) {
        $finalPrice=$this -> unitPrice;
        return $finalPrice;
    }
    public function getRevenue($finalPrice) {
        return $finalPrice*self::CHARGES;
    }
    public function printData($quantity) {
        $finalPrice = $this -> getFinalPrice($quantity);
        $revenue = $this -> getRevenue($finalPrice);
    	echo 'Final price for ' . $quantity . ' ' . $this -> unit . ' of ' . $this -> name .  ' is ' . $finalPrice . ' euro<br>Revenue is ' . $revenue .'<br>';
    }
}

class itemByTheWeight extends pieceItem
{
	protected $unit = 'kg.';
}

$item1 = new pieceItem(1, 'item1', 33);
$item1 -> printData(3);



//Реализация без абстрактного класса

class item 
{	
    const CHARGES = 0.82;
	public $id;
    public $name;
    public $unitPrice;
    protected $unit;
    
    public function __construct($id, $name, $unitPrice) {
    	$this -> id = $id;
        $this -> name = $name;
        $this -> unitPrice = $unitPrice;
    }
    
    public function getFinalPrice($quantity) {
        $finalPrice=$quantity*$this -> unitPrice;
        return $finalPrice;
    }
    public function getRevenue($finalPrice) {
        return $finalPrice*self::CHARGES;
    }
    public function printData($quantity) {
        $finalPrice = $this -> getFinalPrice($quantity);
        $revenue = $this -> getRevenue($finalPrice);
    	echo 'Final price for ' . $quantity . ' ' . $this -> unit . ' of ' . $this -> name .  ' is ' . $finalPrice . ' euro<br>Revenue is ' . $revenue .'<br>';
    }
}

class pieceItem extends item
{	
    protected $unit = 'pcs.';
}

class digitalItem extends item
{
    public function getFinalPrice($quantity) {
        $finalPrice=$this -> unitPrice;
        return $finalPrice;
    }
}

class itemByTheWeight extends pieceItem
{
	protected $unit = 'kg.';
}

$item1 = new pieceItem(1, 'item1', 33);
$item1 -> printData(3);



//2. *Реализовать паттерн Singleton при помощи traits.
//С синглтоном, честно говоря, без объяснения на уроке осталось вовсе непонятным, что означает всё, что написано в куске кода, 
//который дан в методичке, и как всё это должно работать. Как должно определяться, что $intsance не null, то есть, 
//что уже есть экземпляр класса и т.д.
//Поэтому пример, когда для синглота используется трейт, просто взял из сети.


// Трэйт с реализацией фабричного метода
trait Trait_Singleton {

        // Фабричный метод
    public static function getInstance() {
        static $_instance;
        if ($_instance === null) {
            $_instance = new self();  
        }
        return $_instance;
    }

}

// Реализация паттерна Singleton
class Pattern_Singleton {

    use Trait_Singleton;

    // Запрещаем внешний вызов __clone
    protected function __clone() {}

    // Запрещаем внешний вызов __wakeup()
    protected function __wakeup() {}    

    // Запрещаем внешний вызов __construct
    protected function __construct() {}

}
?>
